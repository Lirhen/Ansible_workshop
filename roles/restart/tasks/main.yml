---
- name: Read restart tag
  ansible.builtin.set_fact:
    restart_tag: "{{ hostvars[inventory_hostname].tags.Restart | default('') | lower | trim }}"

- name: Skip host if restart tag missing
  ansible.builtin.meta: end_host
  when: restart_tag | length == 0

- name: Extract weekday and time parts
  ansible.builtin.set_fact:
    restart_day: "{{ (restart_tag.split(' at ')[0] | trim) if ' at ' in restart_tag else (restart_tag | trim) }}"
    time_str:    "{{ (restart_tag.split(' at ')[1] | trim) if ' at ' in restart_tag else '' }}"

- name: Map weekday to number
  ansible.builtin.set_fact:
    restart_weekday: "{{ weekday_map[restart_day] }}"

- name: Ensure cron is installed
  ansible.builtin.package:
    name: cronie
    state: present

- name: Ensure cron daemon is enabled and running
  ansible.builtin.service:
    name: crond
    state: started
    enabled: true

- name: Handle midnight/noon
  ansible.builtin.set_fact:
    restart_hour: "{{ 0 if 'midnight' in time_str else 12 }}"
    restart_minute: 0
  when: "'midnight' in time_str or 'noon' in time_str"

- name: Parse HH:MM am/pm
  ansible.builtin.set_fact:
    _m: "{{ time_str | regex_findall('([0-9]{1,2}):([0-9]{2})\\s*(am|pm)?') }}"
  when: "'midnight' not in time_str and 'noon' not in time_str"

- name: Validate time parse
  ansible.builtin.fail:
    msg: "Invalid Restart time '{{ time_str }}'. Use 'HH:MM am/pm', 'midnight', or 'noon'."
  when: "'midnight' not in time_str and 'noon' not in time_str and (_m|length == 0)"

- name: Compute 24h base values
  ansible.builtin.set_fact:
    _h: "{{ _m[0][0] | int }}"
    _min: "{{ _m[0][1] | int }}"
    _ampm: "{{ _m[0][2] | default('') }}"
  when: "'midnight' not in time_str and 'noon' not in time_str"

- name: Final time facts (24h)
  ansible.builtin.set_fact:
    restart_hour: >-
      {% if _ampm == 'pm' %}{{ (_h % 12) + 12 }}
      {% elif _ampm == 'am' and _h == 12 %}0
      {% else %}{{ _h }}{% endif %}
    restart_minute: "{{ _min }}"
  when: "'midnight' not in time_str and 'noon' not in time_str"

- name: Create weekly reboot cron
  ansible.builtin.cron:
    name: "weekly reboot from tag"
    weekday: "{{ restart_weekday }}"
    hour: "{{ restart_hour }}"
    minute: "{{ restart_minute }}"
    user: root
    job: "/usr/sbin/reboot"

